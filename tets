package ca.sunlife.poc.boogle;



public class ContractNumberValidator {

    public enum AlphabetValues {
        A(10), B(11), C(12), D(13), E(14), F(15), G(16), H(17), I(18), J(19), K(20),
        L(21), M(22), N(23), O(24), P(25), Q(26), R(27), S(28), T(29), U(30), V(31),
        W(32), X(33), Y(34), Z(35);

        private final int value;

        AlphabetValues(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    public static boolean validateContract(String contractNumber) {
        // Unformat the contract number first
        contractNumber = unformatContractNumber(contractNumber);

        String checkDigit = Character.toString(contractNumber.charAt(7));
        String checkDigitComputed = "";

        contractNumber = contractNumber.substring(0, 7);
        char[] sequence = contractNumber.toCharArray();

        int sumEvens = 0, sumOdds = 0, grandTotal = 0, modValue = -1;
        int itemIndex = 1;

        for (char c : sequence) {
            int result = -1;
            String sCharValue = "";
            int currentCharValue = -1;

            if (itemIndex == 1) {
                if (!Character.isDigit(c)) {
                    sCharValue = Integer.toString(AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue());
                    currentCharValue = AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue();
                } else {
                    currentCharValue = Character.getNumericValue(c);
                }
                sumOdds += currentCharValue;
            } else if (itemIndex % 2 == 0) {
                if (!Character.isDigit(c)) {
                    sCharValue = Integer.toString(AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue());
                    currentCharValue = AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue();
                } else {
                    currentCharValue = Character.getNumericValue(c);
                }
                sumEvens += currentCharValue;
            } else {
                if (!Character.isDigit(c)) {
                    sCharValue = Integer.toString(AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue());
                    currentCharValue = AlphabetValues.valueOf(String.valueOf(c).toUpperCase()).getValue();
                } else {
                    currentCharValue = Character.getNumericValue(c);
                }
                sumOdds += currentCharValue;
            }

            itemIndex++;
        }

        grandTotal = sumEvens + sumOdds * 2;
        modValue = grandTotal % 10;

        checkDigitComputed = (modValue == 0) ? "0" : Integer.toString(10 - modValue);

        return checkDigitComputed.equals(checkDigit);
    }

    public String formatContractNumber(String unformattedContractNumber) {
        // A formatted contract number is of the following form 1234,567-6
        unformattedContractNumber = unformattedContractNumber.replace(" ", "").replace(",", "").replace("-", "");

        StringBuilder sb = new StringBuilder();
        sb.append(unformattedContractNumber.substring(0, 4));
        sb.append(",");
        sb.append(unformattedContractNumber.substring(4, unformattedContractNumber.length() - 1));
        sb.append("-");
        sb.append(unformattedContractNumber.charAt(unformattedContractNumber.length() - 1));

        return sb.toString();
    }

    public static String unformatContractNumber(String formattedContractNumber) {
        return formattedContractNumber.replace(",", "").replace("-", "");
    }
}
