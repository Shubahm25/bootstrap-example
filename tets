#include "Functions.h"
#include "mcc2.h"
#include <comdef.h>
#include <wchar.h>
#pragma hdrstop 

// conversion macros
#define CONVERT_CHAR_TO_BSTR(x) _com_util::ConvertStringToBSTR(x)
#define CONVERT_BSTR_TO_CHAR(x) _com_util::ConvertBSTRToString(x)

void BSTRToChar(char *destination, const BSTR source)
{

	try
	{
		char *temp;
		temp = CONVERT_BSTR_TO_CHAR(source);
		if (temp == NULL)
			strcpy(destination,"");
		else
		{
			strcpy(destination, (char *)temp);
			delete temp;
			temp = NULL;
		}
	}
	catch(_com_error)
	{
		throw;
	}

}

void CharToBSTR(BSTR *destination, const char * source)
{

	if (destination == NULL)
	{
		BSTR tempBSTR = NULL;
		tempBSTR = SysAllocString(L"");
		destination = &tempBSTR;
	}
	SysFreeString(*destination);
	*destination = CONVERT_CHAR_TO_BSTR(source);
}

int bstrcmp(BSTR string1, BSTR string2)
{
	return (wcscmp(string1, string2));
}

int _bstricmp(BSTR string1, BSTR string2)
{
	wchar_t *TempString1 = (wchar_t *)string1;
	wchar_t *TempString2 = (wchar_t *)string2;

	return (_wcsicmp(TempString1, TempString2));
}


BOOL TMGConvertLongToBSTR( long LongVal, BSTR * BstrVal)
{
	BOOL Status=MC_OK;
	wchar_t UniCodeBuffer[50]=L"";

	_ltow( LongVal, UniCodeBuffer, 10);

	if (BstrVal!= NULL)
		{
		SysFreeString(*BstrVal);	
		*BstrVal= SysAllocString(UniCodeBuffer);
		}
	else
		{
		Status =  MC_ERROR;
		}

 	return Status;
}


short TMGConvertBSTRToLong(BSTR bstrVal, long *longVal)
{
	char Buffer[100];
	short returnCode = MC_OK;

	BSTRToChar(Buffer, bstrVal);
	
	if (strlen(Buffer) == 0)
	{
		returnCode = MC_ERROR;
	}
	else
	{
		*longVal = atol(Buffer);
	}

	return returnCode;
}

void BSTRncCpy( BSTR *dest, const BSTR src, int Start, int ChrCount )
{
	_bstr_t TempSrc = src;
	_bstr_t TempDest;

	char TempSrcBuffer[64]="";
	char TempDestBuffer[64]="";

	strcpy (TempSrcBuffer,(char *)TempSrc);
	strncpy(TempDestBuffer,TempSrcBuffer+Start,ChrCount );

	TempDest = TempDestBuffer;

	if (dest!= NULL)
	{
		SysFreeString(*dest);	
		*dest = SysAllocString(TempDest);
	}
	
}

void BSTRncReplace (BSTR *dest, const BSTR src, int Start, int ChrCount)

{
	_bstr_t TempSrc = src;
	_bstr_t TempDest = *dest;

	char TempSrcBuffer[64]="";
	char TempDestBuffer[64]="";

	strcpy (TempSrcBuffer,(char *)TempSrc);
	strcpy (TempDestBuffer, (char *)TempDest);

	for (int i = 0; i < ChrCount; i++){
		TempDestBuffer[i + Start] = TempSrcBuffer[i];
	}

	TempDest = TempDestBuffer;


	if (dest!= NULL)
	{
		SysFreeString(*dest);	
		*dest = SysAllocString(TempDest);
	}
	
}
