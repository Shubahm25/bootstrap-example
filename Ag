package com.yourorg;

import lombok.EqualsAndHashCode;
import lombok.Value;
import org.openrewrite.*;
import org.openrewrite.internal.lang.Nullable;
import org.openrewrite.maven.MavenVisitor;
import org.openrewrite.maven.UpgradeDependencyVersion;
import org.openrewrite.xml.tree.Xml;

import java.util.List;
import java.util.stream.Collectors;

@Value
@EqualsAndHashCode(callSuper = true)
public class UpgradeDependencyVersionOptionalArtifact extends Recipe {
    @Option(displayName = "Group ID",
            description = "The group ID of the dependency to upgrade.",
            example = "com.fasterxml.jackson.core")
    String groupId;

    @Option(displayName = "Artifact ID",
            description = "The artifact ID of the dependency to upgrade. If not provided, all artifacts for the group ID are updated.",
            example = "jackson-core",
            required = false)
    @Nullable
    String artifactId;

    @Option(displayName = "New version",
            description = "The new version to upgrade to, supports Node Semver selectors.",
            example = "2.15.X")
    String newVersion;

    @Override
    public String getDisplayName() {
        return "Upgrade Maven dependency version (optional artifactId)";
    }

    @Override
    public String getDescription() {
        return "Upgrades the version of a Maven dependency by groupId and optionally artifactId.";
    }

    @Override
    public TreeVisitor<?, ExecutionContext> getVisitor() {
        return new MavenVisitor<ExecutionContext>() {
            @Override
            public Xml visitDocument(Xml.Document document, ExecutionContext ctx) {
                if (artifactId != null) {
                    Recipe upgradeRecipe = new UpgradeDependencyVersion(groupId, artifactId, newVersion, null, null);
                    return (Xml) upgradeRecipe.getVisitor().visit(document, ctx);
                }

                List<Xml.Tag> dependencies = findDependencies(document, groupId);
                Xml result = document;
                for (Xml.Tag dep : dependencies) {
                    String depArtifactId = dep.getChildValue("artifactId").orElse(null);
                    if (depArtifactId != null) {
                        Recipe upgradeRecipe = new UpgradeDependencyVersion(groupId, depArtifactId, newVersion, null, null);
                        result = (Xml) upgradeRecipe.getVisitor().visit(result, ctx);
                    }
                }
                return result;
            }

            private List<Xml.Tag> findDependencies(Xml.Document document, String groupId) {
                return document.getRoot()
                        .getChildren("dependencies").stream()
                        .flatMap(deps -> deps.getChildren("dependency").stream())
                        .filter(dep -> groupId.equals(dep.getChildValue("groupId").orElse(null)))
                        .collect(Collectors.toList());
            }
        };
    }
}
